// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegionSyd.Repositories.Entities;

#nullable disable

namespace RegionSyd.Repositories.Migrations
{
    [DbContext(typeof(RegionSydDBContext))]
<<<<<<<< HEAD:Repository/Migrations/20220831132656_init.Designer.cs
    [Migration("20220831132656_init")]
========
    [Migration("20220831130721_init")]
>>>>>>>> a007813b31e8dae10949e5aabdde0549a615d438:Repository/Migrations/20220831130721_init.Designer.cs
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Alarm", b =>
                {
                    b.Property<int>("AlarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AlarmID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlarmId"), 1L, 1);

                    b.Property<int?>("BedId")
                        .HasColumnType("int")
                        .HasColumnName("BedID");

                    b.HasKey("AlarmId");

                    b.HasIndex(new[] { "BedId" }, "IX_Alarm_BedID");

                    b.ToTable("Alarm", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Bed", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedId"), 1L, 1);

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.HasKey("BedId");

                    b.HasIndex(new[] { "RoomId" }, "IX_Bed_RoomID");

                    b.ToTable("Bed", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateTime?>("TreatmentEnd")
                        .HasColumnType("datetime");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentID");

                    b.Property<int>("TreatmentPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentPlaceID");

                    b.Property<DateTime>("TreatmentStart")
                        .HasColumnType("datetime");

                    b.HasKey("BookingId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Booking_PatientID");

                    b.HasIndex(new[] { "TreatmentId" }, "IX_Booking_TreatmentID");

                    b.HasIndex(new[] { "TreatmentPlaceId" }, "IX_Booking_TreatmentPlaceID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TreatmentPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentPlaceID");

                    b.HasKey("DepartmentId");

                    b.HasIndex(new[] { "TreatmentPlaceId" }, "IX_Department_TreatmentPlaceID");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeTypeID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("EmployeeId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Employee_DepartmentID");

                    b.HasIndex(new[] { "EmployeeTypeId" }, "IX_Employee_EmployeeTypeID");

                    b.HasIndex(new[] { "UserId" }, "IX_Employee_UserID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeId"), 1L, 1);

                    b.Property<string>("EmployeeTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeType", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.FileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FileTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTypeId"), 1L, 1);

                    b.Property<string>("FileTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FileTypeId");

                    b.ToTable("FileType", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Journal", b =>
                {
                    b.Property<int>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JournalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalId"), 1L, 1);

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("JournalId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Journal_PatientID");

                    b.ToTable("Journal", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntry", b =>
                {
                    b.Property<int>("JournalEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JournalEntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryId"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("JournalEntryStatusId")
                        .HasColumnType("int")
                        .HasColumnName("JournalEntryStatusID");

                    b.Property<int>("JournalId")
                        .HasColumnType("int")
                        .HasColumnName("JournalID");

                    b.Property<DateTime>("LastEdited")
                        .HasColumnType("datetime");

                    b.Property<int>("TreatmentPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentPlaceID");

                    b.HasKey("JournalEntryId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_JournalEntry_DepartmentID");

                    b.HasIndex(new[] { "JournalEntryStatusId" }, "IX_JournalEntry_JournalEntryStatusID");

                    b.HasIndex(new[] { "JournalId" }, "IX_JournalEntry_JournalID");

                    b.HasIndex(new[] { "TreatmentPlaceId" }, "IX_JournalEntry_TreatmentPlaceID");
<<<<<<<< HEAD:Repository/Migrations/20220831132656_init.Designer.cs

                    b.ToTable("JournalEntry", (string)null);

                    b.HasData(
                        new
                        {
                            JournalEntryId = 1,
                            DateAdded = new DateTime(2021, 7, 24, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Description = "Patient klager over søvnbesvær",
                            JournalEntryStatusId = 1,
                            JournalId = 1,
                            LastEdited = new DateTime(2022, 8, 31, 13, 26, 55, 904, DateTimeKind.Utc).AddTicks(2962),
                            TreatmentPlaceId = 2
                        },
                        new
                        {
                            JournalEntryId = 2,
                            DateAdded = new DateTime(2017, 2, 27, 8, 15, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            Description = "Patient vil gerne vide om de har mangel på D vitamin",
                            JournalEntryStatusId = 1,
                            JournalId = 1,
                            LastEdited = new DateTime(2022, 8, 31, 13, 26, 55, 904, DateTimeKind.Utc).AddTicks(2977),
                            TreatmentPlaceId = 2
                        },
                        new
                        {
                            JournalEntryId = 3,
                            DateAdded = new DateTime(2022, 2, 27, 8, 15, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Description = "Patient har svært ved at høre",
                            JournalEntryStatusId = 2,
                            JournalId = 2,
                            LastEdited = new DateTime(2022, 8, 31, 13, 26, 55, 904, DateTimeKind.Utc).AddTicks(3012),
                            TreatmentPlaceId = 1
                        });
========

                    b.ToTable("JournalEntry", (string)null);
>>>>>>>> a007813b31e8dae10949e5aabdde0549a615d438:Repository/Migrations/20220831130721_init.Designer.cs
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntryFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("FileNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FileTypeID");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int")
                        .HasColumnName("JournalEntryID");

                    b.HasKey("FileId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_JournalEntryFile_EmployeeID");

                    b.HasIndex(new[] { "FileTypeId" }, "IX_JournalEntryFile_FileTypeID");

                    b.HasIndex(new[] { "JournalEntryId" }, "IX_JournalEntryFile_JournalEntryID");

                    b.ToTable("JournalEntryFile", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntryNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"), 1L, 1);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int")
                        .HasColumnName("JournalEntryID");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("NoteId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_JournalEntryNote_EmployeeID");

                    b.HasIndex(new[] { "JournalEntryId" }, "IX_JournalEntryNote_JournalEntryID");

                    b.ToTable("JournalEntryNote", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntryStatus", b =>
                {
                    b.Property<int>("JournalEntryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JournalEntryStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JournalEntryStatusId");

                    b.ToTable("JournalEntryStatus", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Monitor", b =>
                {
                    b.Property<int>("MonitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MonitorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonitorId"), 1L, 1);

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("MonitorId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Monitor_PatientID");

                    b.ToTable("Monitor", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<int?>("BedId")
                        .HasColumnType("int")
                        .HasColumnName("BedID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PatientId");

                    b.HasIndex("BedId");

                    b.HasIndex(new[] { "UserId" }, "IX_Patient_UserID");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.HasKey("RoomId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Room_DepartmentID");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TreatmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int>("TreatmentDuration")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TreatmentId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Treatment_DepartmentID");

                    b.ToTable("Treatment", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.TreatmentPlace", b =>
                {
                    b.Property<int>("TreatmentPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TreatmentPlaceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentPlaceId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TreatmentPlaceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TreatmentPlaceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentPlaceTypeID");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("TreatmentPlaceId");

                    b.HasIndex(new[] { "TreatmentPlaceTypeId" }, "IX_TreatmentPlace_TreatmentPlaceTypeID");

                    b.ToTable("TreatmentPlace", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.TreatmentPlaceType", b =>
                {
                    b.Property<int>("TreatmentPlaceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TreatmentPlaceTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentPlaceTypeId"), 1L, 1);

                    b.Property<string>("TreatmentPlaceTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TreatmentPlaceTypeId");

                    b.ToTable("TreatmentPlaceType", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cpr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "UserTypeId" }, "IX_User_UserTypeID");

                    b.HasIndex(new[] { "Cpr" }, "UK_CPR")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"), 1L, 1);

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserType", (string)null);
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Alarm", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Bed", "Bed")
                        .WithMany("Alarms")
                        .HasForeignKey("BedId")
                        .HasConstraintName("FK_Alarm_Bed");

                    b.Navigation("Bed");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Bed", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Bed_Room");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Booking", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Patient", "Patient")
                        .WithMany("Bookings")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Patient");

                    b.HasOne("RegionSyd.Repositories.Entities.Treatment", "Treatment")
                        .WithMany("Bookings")
                        .HasForeignKey("TreatmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Treatment");

                    b.HasOne("RegionSyd.Repositories.Entities.TreatmentPlace", "TreatmentPlace")
                        .WithMany("Bookings")
                        .HasForeignKey("TreatmentPlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_TreatmentPlace");

                    b.Navigation("Patient");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentPlace");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Department", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.TreatmentPlace", "TreatmentPlace")
                        .WithMany("Departments")
                        .HasForeignKey("TreatmentPlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_Department_TreatmentPlace");

                    b.Navigation("TreatmentPlace");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Employee", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Department");

                    b.HasOne("RegionSyd.Repositories.Entities.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_EmployeeType");

                    b.HasOne("RegionSyd.Repositories.Entities.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("Department");

                    b.Navigation("EmployeeType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Journal", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Patient", "Patient")
                        .WithMany("Journals")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Journal_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntry", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Department", "Department")
                        .WithMany("JournalEntries")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("RegionSyd.Repositories.Entities.JournalEntryStatus", "JournalEntryStatus")
                        .WithMany("JournalEntries")
                        .HasForeignKey("JournalEntryStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_JournalEntry_JournalEntryStatus");

                    b.HasOne("RegionSyd.Repositories.Entities.Journal", "Journal")
                        .WithMany("JournalEntries")
                        .HasForeignKey("JournalId")
                        .IsRequired()
                        .HasConstraintName("FK_JournalEntry_Journal");

                    b.HasOne("RegionSyd.Repositories.Entities.TreatmentPlace", "TreatmentPlace")
                        .WithMany("JournalEntries")
                        .HasForeignKey("TreatmentPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Journal");

                    b.Navigation("JournalEntryStatus");

                    b.Navigation("TreatmentPlace");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntryFile", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Employee", "Employee")
                        .WithMany("JournalEntryFiles")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_JournalEntryFile_Employee");

                    b.HasOne("RegionSyd.Repositories.Entities.FileType", "FileType")
                        .WithMany("JournalEntryFiles")
                        .HasForeignKey("FileTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_JournalEntryFile_FileType");

                    b.HasOne("RegionSyd.Repositories.Entities.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryFiles")
                        .HasForeignKey("JournalEntryId")
                        .IsRequired()
                        .HasConstraintName("FK_JournalEntryFile_JournalEntry");

                    b.Navigation("Employee");

                    b.Navigation("FileType");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntryNote", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Employee", "Employee")
                        .WithMany("JournalEntryNotes")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_JournalEntryNote_Employee");

                    b.HasOne("RegionSyd.Repositories.Entities.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryNotes")
                        .HasForeignKey("JournalEntryId")
                        .IsRequired()
                        .HasConstraintName("FK_JournalEntryNote_JournalEntry");

                    b.Navigation("Employee");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Monitor", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Patient", "Patient")
                        .WithMany("Monitors")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Monitor_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Patient", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Bed", "Bed")
                        .WithMany("Patients")
                        .HasForeignKey("BedId")
                        .HasConstraintName("FK_Patient_Bed");

                    b.HasOne("RegionSyd.Repositories.Entities.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Patient_User");

                    b.Navigation("Bed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Room", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Treatment", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.Department", "Department")
                        .WithMany("Treatments")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Treatment_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.TreatmentPlace", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.TreatmentPlaceType", "TreatmentPlaceType")
                        .WithMany("TreatmentPlaces")
                        .HasForeignKey("TreatmentPlaceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPlace_TreatmentPlaceType");

                    b.Navigation("TreatmentPlaceType");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.User", b =>
                {
                    b.HasOne("RegionSyd.Repositories.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_User_UserType");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Bed", b =>
                {
                    b.Navigation("Alarms");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("JournalEntries");

                    b.Navigation("Rooms");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Employee", b =>
                {
                    b.Navigation("JournalEntryFiles");

                    b.Navigation("JournalEntryNotes");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.FileType", b =>
                {
                    b.Navigation("JournalEntryFiles");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Journal", b =>
                {
                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntry", b =>
                {
                    b.Navigation("JournalEntryFiles");

                    b.Navigation("JournalEntryNotes");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.JournalEntryStatus", b =>
                {
                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Patient", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Journals");

                    b.Navigation("Monitors");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.Treatment", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.TreatmentPlace", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Departments");

                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.TreatmentPlaceType", b =>
                {
                    b.Navigation("TreatmentPlaces");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.User", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("RegionSyd.Repositories.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}

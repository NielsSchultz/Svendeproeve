@page "/journal/noter"

@using Common.DTOs
@inject IJournalNoteService _jornalNoteService

@if (CurrentUser != null)
{
    if (CurrentUser.Usertype == UserTypes.Employee)
    {
        <div class="container">
            <div class="row">
                <div class="col-8 mx-auto">
                    <h6>Ny note</h6>
                    <textarea rows="6" style="width:100%" />
                    <input type="button" class="btn btn-green" value="Opret note" />
                </div>
            </div>
        </div>
    }
}
<div class="container">
    <div class="row">
        <div class="col-8 mx-auto">
            @if (notes != null)
            {
                <RadzenAccordion Multiple="true">
                    <Items>
                        @foreach (var note in notes)
                        {
                            var enployeeName = Helpers.FullNameHelper.GetFullName(note.EmployeeFirstname, note.EmployeeMiddlename, note.EmployeeLastname);
                            var noteTitle = $"{note.DateAdded} {enployeeName}, {note.EmployeeTypeName}";
                            <RadzenAccordionItem Text="@noteTitle">
                                @note.NoteContent
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            }
        </div>
    </div>
</div>


@code {
    List<JournalEntryNoteDTO> notes;
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }
    public CurrentUser CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await GetCurrentUserAsync();
        notes = await _jornalNoteService.GetAll(Id);
    }

    public void CreateNote(JournalEntryNoteDTO note)
    {
        note.DateAdded = DateTime.Now;
        note.EmployeeId = CurrentUser.Id;

        //@if () //TODO get employee name and type here // if læge = true
        //{
        //    note.IsApproved = true;
        //}
    }

    void Change(object value)
    {
        //console.Log($"{name} item with index {value} {action}");
    }

    public async Task<CurrentUser> GetCurrentUserAsync()
    {
        return await localStorage.GetItemAsync<CurrentUser>(SessionConstants.CurrentUser);
    }
}

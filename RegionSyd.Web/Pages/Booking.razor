@page "/booking"
@inject IJSRuntime JsRuntime
@inject ITreatmentService _treatmentService
@inject ITreatmentPlaceService _treatmentPlaceService
@inject IBookingService _bookingService

<div class="container">
    <div class="row mb-4">
        <div class="col-6 mx-auto">
            @if (Treatments != null)
            {
                <h6>Vælg undersøgelse</h6>
                <select @bind="SelectedTreatmentId" class="form-control">
                    <option disabled>Vælg undersøgelse</option>
                    @foreach (var treatment in Treatments)
                    {
                        <option value="@treatment.TreatmentId">@treatment.TreatmentName</option>
                    }

                </select>
            }
            else
            {
                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Success" class="w-50 mx-auto mt-5" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />

            }
        </div>
    </div>

    @if (SelectedTreatmentId > 0)
    {
        <div class="row mb-4">
            <div class="col-6 mx-auto">
                @if (TreatmentPlaces != null)
                {

                    <h6>Vælg sted</h6>
                    <select class="form-control" @bind="@SelectedTreatmentPlaceId">
                        <option disabled>Vælg sted</option>
                        @foreach (var treatmentPlace in TreatmentPlaces)
                        {
                            <option value="@treatmentPlace.TreatmentPlaceId">@treatmentPlace.TreatmentPlaceName</option>
                        }
                    </select>
                }
            </div>
        </div>
    }

    @if (SelectedTreatmentPlaceId > 0)
    {
        <div class="row mb-4">
            <div class="col-6 m-auto d-table">
                <div class="row">

                    <div class="col-6">
                        <h6>Vælg dato</h6>
                        <RadzenDatePicker ShowTime="true" DateFormat="dd/MM/yyyy" TValue="DateTime?" DateRender=@DateRender Change=@(args => OnChange(args,"dd-MM-yyyy")) Class="w-100" />
                    </div>
                    @if (SelectedTreatmentDate.HasValue)
                    {
                        <div class="col-6 mx-auto">
                            @if (SelectedTreatmentTimes != null)
                            {
                                <h6>Vælg tid</h6>
                                <select class="form-control" @bind="@SelectedTreatmentTime">
                                    <option disabled>Ledige tider</option>
                                    @foreach (var time in SelectedTreatmentTimes)
                                    {
                                        <option value="@time">kl. @time.ToShortTimeString()</option>
                                    }
                                </select>
                            }

                        </div>
                    }
                </div>
            </div>

        </div>
    }
    @if (SelectedTreatmentTime.HasValue)
    {
        <div class="row">
            <div class="col-4">
                <input type="button" value="Book" @onclick="CreateBooking" />
            </div>
        </div>
    }

</div>

@code {
    DateTime? value = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };
    public List<TreatmentDTO> Treatments { get; set; }
    public List<TreatmentPlaceDTO> TreatmentPlaces { get; set; }
    public int SelectedTreatmentId;
    public int SelectedTreatmentPlaceId;
    public DateTime? SelectedTreatmentDate;
    public DateTime? SelectedTreatmentTime;
    public List<DateTime> SelectedTreatmentTimes;
    public CurrentUser CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await GetCurrentUserAsync();
        Treatments = await _treatmentService.GetAll();
        TreatmentPlaces = await _treatmentPlaceService.GetAll();
        GetAllBookingsByDate(DateTime.Now);
        StateHasChanged();
    }

    async void OnChange(DateTime? value, string format)
    {
        //console.Log($"{name} value changed to {value?.ToString(format)}");
        //JsRuntime.InvokeVoidAsync("alert", $"{name} value changed to {value?.ToString(format)}"); // Alert

        SelectedTreatmentDate = value;
        SelectedTreatmentTimes = TreatmentTimeOfDayList();
        StateHasChanged();
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value = DateTime.Now;

    }

    List<DateTime> TreatmentTimeOfDayList()
    {
        var date = DateTime.Now;
        var starttime = new DateTime(date.Year, date.Month, date.Day, 10, 00, 00);
        return new List<DateTime>()
        {
            starttime.AddMinutes(30),
            starttime.AddHours(1),
            starttime.AddHours(1).AddMinutes(30),
            starttime.AddHours(2),
            starttime.AddHours(2).AddMinutes(30),
            starttime.AddHours(3),
            starttime.AddHours(3).AddMinutes(30),
            starttime.AddHours(4),
            starttime.AddHours(4).AddMinutes(30),
            starttime.AddHours(5),
            starttime.AddHours(5).AddMinutes(30),
        };
    }

    void GetAllBookingsByDate(DateTime dateSelected)
    {
        var start = new DateTime(2022, 08, 30, 11, 00, 00);
        var tset = new List<BookingDTO>()
        {
            new BookingDTO{BookingId=1, PatientId = 1, TreatmentDuration = 30, TreatmentStart = new DateTime(2022,08,30,11,00,00), TreatmentEnd = (start.AddMinutes(30)), TreatmentId = 1, TreatmentName = "Blodprøve", TreatmentPlaceId = 1, TreatmentPlaceName= "Sygehus" }
        };

        //_bookingService.GetAll(); TODO
    }


    void CreateBooking()
    {
        var bookingDateTime = DateTime.Now;
        if (SelectedTreatmentDate != null && SelectedTreatmentTime != null)
        {
            bookingDateTime = new DateTime
            (SelectedTreatmentDate.Value.Day,
            SelectedTreatmentDate.Value.Month,
            SelectedTreatmentDate.Value.Day,
            SelectedTreatmentTime.Value.Hour,
            SelectedTreatmentTime.Value.Minute,
            SelectedTreatmentTime.Value.Second);
        }

        var duration = 30;

        var booking = new BookingDTO();
        booking.TreatmentStart = bookingDateTime;
        booking.TreatmentEnd = bookingDateTime.AddMinutes(duration);
        booking.TreatmentDuration = duration;
        booking.PatientId = 1; //TODO get currentUser
        var result = _bookingService.Create(booking);
        StateHasChanged();

        //var tset = new List<BookingDTO>()
        //{
        //    new BookingDTO{BookingId=1, PatientId = 1, TreatmentDuration = 30, TreatmentStart = new DateTime(2022,08,30,11,00,00), TreatmentEnd = (start.AddMinutes(30)), TreatmentId = 1, TreatmentName = "Blodprøve", TreatmentPlaceId = 1, TreatmentPlaceName= "Sygehus" }
        //};

    }

    public async Task<CurrentUser> GetCurrentUserAsync()
    {
        return await localStorage.GetItemAsync<CurrentUser>(SessionConstants.CurrentUser);
    }



}
